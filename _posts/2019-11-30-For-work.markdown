---
layout: post
title: "找完工作的一个自我总结"
date: 2019-11-30 21:40:00 +0800
img: 3/main.jpg
description: 对找工作那段时间学习的一个总结，按照自己学习逻辑对期间的知识进行整理，以便之后查阅（职位：Java后台开发工程师）
---

1. 算法

+ 基本类型(可以直接使用)

  |         类型          | 大小（1byte=8bit) |       数值范围       | 包装类型  |  默认值  |
  | :-------------------: | :---------------: | :------------------: | :-------- | :------: |
  |         byte          |       1byte       |    [-2^7, 2^7-1]     | Byte      |    0     |
  |         short         |       2byte       |   [-2^15, 2^15-1]    | Short     |    0     |
  |          int          |       4byte       |   [-2^31, 2^31-1]    | Integer   |    0     |
  |         long          |       8byte       |   [-2^63, 2^63-1]    | Long      |    0L    |
  | float(IEEE754单精度)  |       4byte       |  ~[-3.4E38, 3.4E38]  | Float     |  +0.0F   |
  | double(IEEE754双精度) |       8byte       | ~[-1.8E308, 1.8E308] | Double    |  +0.0D   |
  |        boolean        |       1byte       |    {false, true}     | Boolean   |  false   |
  |         char          |       2byte       |     [0, 2^16-1]      | Character | '\u0000' |

**注意**：需要特别注意类型所能表示的数值范围和精度，对于类型的大小比较要知道==和equals的区别。

+ 一般类型(面试时一般都能直接使用)
  + String（底层使用char数组实现）
  + 数组类型（如int[], byte[]等）
  + ArrayList（底层是数组），LinkedList（底层是链表，可以当Stack、Queue使用）

**注意**：使用String自带的方法，要特别注意对一些特殊字符的转义处理。

+ Java内置实现类型（笔试的时候可以用，面试的话要看是否允许）
  + HashMap（处理Hash冲突的方式）, LinkedHashMap（可以实现LRU算法）
  + TreeMap（排序Map，底层用红黑树实现，可以用来实现一致性Hash算法）
  + HashSet（基本实现依赖HashMap）,LinkedHashSet
  + PriorityQueue（可以实现大顶堆和小顶堆，用它可以生成哈夫曼树）
  + ConcurrentHashMap（线程安全的HashMap，一般会问分段锁的实现原理）
  + Arrays（可以用其对数组进行排序），Collections
  + 阻塞队列

**注意**：对于容器类型，需要注意其大小动态变化的详细流程。

+ 其他类型
  + 二叉树（非递归遍历，后缀表达式的计算）
  + 平衡二叉树（旋转节点以保持平衡）
  + 红黑树（Java8之后HashMap的冲突解决方法）
  + 跳表（Redis中的sortset数据类型）
  + B树，B+树（MySQL索引）
  + 图（遍历问题，并查集问题）
  + trie树（单词查找树）
  + 布隆过滤器（海量数据去重处理）
+ 基本算法
  + 排序：**快速排序**，希尔排序，归并排序等
  + 查找（一般o(n)复杂度的容易想出来，但面试官一般要求写出o(logn)复杂度的方法）
  + 字符串处理
  + 链表相关（判断环，环的入口，反转链表，）
  + 树（遍历，构建）和图（遍历，拓扑排序，最小生成树，最短路径）
  + 并查集
+ 基本方法
  + 二分法（partition函数）
  + 动态规划（找到动态转移方程）
  + 数学知识
  + 递归（DFS，BFS，回溯法）[用Stack把其转化为非递归]
  + 贪心（正确的贪心策略）
  + 双指针
  + 排序（一般对输入进行排序，再用二分法处理，以减小时间复杂度）
  + 滑动窗口
  + 位运算（异或^、与&、或|、非!）

2. 基础知识

+ 计算机网络

  + 五层体系结构（物理层、数据链路层、网络层、传输层和应用层）

  + TCP/IP协议

    + TCP数据报格式

    ![](../assets/img/3/tcp.png)

    + IP数据报格式

    ![](../assets/img/3/ip.png)

    + TCP三次握手（详细过程，客户端和服务端各个状态变化）

    ![](../assets/img/3/threehandTCP.png)

    + TCP四次挥手（详细过程，TIME_WAIT为何等2个MSL）

    ![](../assets/img/3/fourgoodbyeTCP.png)

    TIME_WAIT状态有两个存在的理由<sup>[Unix网络编程卷一：套接字联网API]</sup>：

    ​             (1)可靠地实现TCP全双工连接的终止；

    ​             (2)允许老的重复分节在网络消逝。

    + TCP拥塞控制，流量控制，滑动窗口，超时重传

    + 基本TCP套接字编程

    ![](../assets/img/3/tcpServer.png)

  + IP地址编址方式（子网划分）

  + HTTP协议（Request和Response数据包格式）

    + 请求头格式

    + 响应头格式
    + 常见状态码含义（200，404，500，302等）
    + 长连接

  + UDP数据报格式

  ![](../assets/img/3/udp.png)

  + HTTPS协议
  + TCP和UDP对比（各自适用的场景）
  + DNS协议

  ![](../assets/img/3/DNS.png)

+ 操作系统

  + I/O模型

    + 阻塞式I/O模型

    <img src="../assets/img/3/blockIO.png"></img>

    进程调用recvfrom，其系统调用直到数据报到达且被复制到应用进程的缓存区或者发生错误才返回。

    + 非阻塞I/O模型

    ![](../assets/img/3/nonblockIO.png)

    前三次调用recvfrom时没有数据可返回，因此内核转而立即返回一个EWOULDBLOCK错误。第四次调用recvfrom时已有一个数据报准备好，它被复制到应用进程缓冲区，于是recvfrom成功返回。当一个应用进程像这样对一个非阻塞描述符循环调用recvfrom时，我们称之为**轮询**（polling）。应用进程持续轮询内核，以查看某个操作是否就绪。这样做往往会耗费大量CPU时间，所以一般很少这样使用。

    + I/O复用模型

    ![](../assets/img/3/multiplexIO.png)

    相比较阻塞I/O模型，I/O复用并不显得有什么优势，事实上由于使用select需要两个而不是单个系统调用，I/O复用还稍有劣势。不过，使用select的优势在于我们可以用一个线程/进程等待多个描述符就绪。

    + 信号驱动式I/O模型

    ![](../assets/img/3/signaldrivenIO.png)

    我们首先开启套接字的信号驱动式I/O功能，并通过sigaction系统调用安装一个信号处理函数。该系统调用将立即返回，我们的进程继续工作，也就是说它没有被阻塞。当数据准备好读取时，内核就为该进程产生一个SIGIO信号。我们随后既可以在信号处理函数中调用recvfrom读取数据，并通知主循环数据已准备好待处理；也可以立即通知主循环，让它读取数据报。

    无论如何处理SIGIO信号，这种模型的优势在于等待数据报达到期间进程不被阻塞。主循环可以继续执行，只要等待来自信号处理函数的通知：既可以是数据已准备好被处理，也可以是数据报已准备好被读取。

    

    + 异步I/O模型

    ![](../assets/img/3/aioIO.png)

    一般来说，这些函数工作机制是：告知内核启动某个操作，并让内核在整个操作（包括将数据从内核复制到我们自己的缓存区）完成后通知我们。这模型与信号驱动模型的主要区别在于：信号驱动式I/O是由内核通知我们何时启动一个I/O操作，而异步I/O模型是由内核通知我们I/O操作何时完成。

  各种I/O模型比较如下：

  ![](../assets/img/3/compareIO.png)

  + 死锁

    + 四个必要条件

    资源互斥、请求并保持、不可剥夺和循环等待

    + 处理死锁的方法

    打破四个必要条件中的任何一个即可

  + 进程（fork()）

    + 进程控制块（Processing Control Block, PCB）
    + 生命周期

    ![](../assets/img/3/processStatus.png)

    **创建状态**：系统已为其分配PCB，但进程所需资源尚未分配，进程还未进入主存，即创建工作尚未完成，进程还不能被调度运行；
    **就绪状态**：进程已分配到除CPU以外的所有必要资源，等待获得CPU；
    **执行状态**：进程已获得CPU，程序正在执行；
    **阻塞状态**：正在执行的进程由于某事件而暂时无法继续执行时，放弃CPU而自行阻塞；
    **终止状态**：进程到达自然结束点或者因意外被终结，将进入终止状态，进入终止状态的进程不能再执行，但在操作系统中仍然保留着一个记录，其中保存状态码和一些计时统计数据，供其它进程收集。

    + 调度算法（FCFS, SJF, SRTF, HRRF, Priority, RR）

  + 线程（pthread_create()）

  同一进程内的所有线程共享相同的全局内存，这使得线程之间易于共享信息，然而伴随这种简易性而来的是**同步**（synchronization）问题。同一进程内的所有线程除了共享全局变量外还共享：进程指令、大多数数据、打开的文件（即描述符）、信号处理函数和信号处置、当前工作目录、用户ID和组ID。不过每个线程都有各自的：线程ID、寄存器集合（包括程序计数器和栈指针），栈（用于存放局部变量和返回地址）、errno、信号掩码和优先级。

  **注意**：线程和进程之间的区别。

  + 进程间通信方式（InterProcess Communication, IPC）

    + 管道

    管道允许在进程之间按先进先出的方式传送数据，是进程间通信的一种常见方式。管道分为匿名管道（pipe）和命名管道（named pipe 或 FIFO）两种。管道是半双工的，数据只能向一个方向流动；需要双方通信时，需要建立起两个管道。

    + 消息队列

    消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。

    + 共享内存

    共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。**共享内存是最快的IPC方式**，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。

    + 信号量

    信号量是一个计数器，可以用来**控制多个进程/线程对共享资源的访问**。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。

    + 信号

    信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。信号是Linux系统中用于进程之间通信或操作的一种机制，信号可以在任何时候发送给某一进程，而无须知道该进程的状态。如果该进程并未处于执行状态，则该信号就由内核保存起来，直到该进程恢复执行并传递给他为止。如果一个信号被进程设置为阻塞，则该信号的传递被延迟，直到其阻塞被取消时才被传递给进程。

    + 套接字

    套接字口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同主机间的进程通信

  + 虚拟内存

    + 目前机制需要将脏页刷回到磁盘一般是以下情况：
      (1) 脏页缓存占用的内存太多，内存空间不足；
      (2) 脏页已经更改了很长时间，时间上已经到了临界值，需要及时刷新保持内存和磁盘上数据一致性；
      (3) 外界命令强制刷新脏页到磁盘；
      (4) write写磁盘时检查状态刷新
    + 虚拟地址和物理地址区别
    + 页面置换算法（最佳置换算法、FIFO、LRU等）

  + 存储器层次结构

    ![](../assets/img/3/store.png)
    
    + 缓存回写机制
    
    + 缓存替换算法（LFU, LRU, ARC, FIFO, MRU）

+ 设计模式

  + 单例模式（饿汉模式和懒汉模式实现）
  + 工厂模式
  + 观察者模式
  + 代理模式

+ JVM

  + 性能调优
  + Java中的锁相关（自旋锁、锁消除、轻量级锁，偏向锁等）
  + 垃圾回收器
  + 垃圾回收过程
  + 内存模型

+ 数据库

  + SQL语句
  + 事务特性ACID（原子性、一致性、隔离性和持久性）
  + 事务隔离级别（读未提交、读已提交、可重复读、可序列化读）
  + 数据库设计范式
    + 第一范式：原子性，每一列不能再分
    + 第二范式：表中的每一列必须和联合主键相关，不能和某一部分相关
    + 第三范式：每一列和主键直接相关，而不是间接相关，减小数据冗余
  
+ 面向对象思想（封装、继承和多态）

3. 项目实践

+ Redis（数据类型、使用场景）

+ MySQL

  + 主从复制
  + 各种锁（表级锁、行级锁、意向锁和gap锁等）
  + 存储引擎（Innodb）
  + 索引实现方式
  + 索引匹配原则（最左原则）
  + explain

+ 消息队列

+ 海量数据处理

+ Nginx

  + 正向代理和反向代理区别
  + Nginx的负载均衡策略
  + Master进程和Worker进程
  + keepalive机制

+ Java基础

  + 手写一个TCP服务

  服务端：socket，bind，listen，accept

  客户端：socket，connect

  **服务端**

  ```java
  import java.net.ServerSocket;
  import java.net.Socket;
  /**
  * 省去对流的关闭操作
  **/
  public class Server {
      public static void main(String[] args) {
          ServerSocket serverSocket = null;
          //完成socket(),bind(),listen()操作
          serverSocket = new ServerSocket(8080);
          //接收客户端连接(阻塞循环服务器)
          while(true) {
              //进行accept()操作
              Socket socket = serverSocket.accept();
              //得到连接socket，进行处理
              process(socket);
          }
      }
  }
  
  ```

  **客户端**

  ```java
  import java.io.Socket;
  /**
  * 省去对流的关闭操作
  **/
  public class Client {
      public static void main(String[] args) {
          //完成socket(),connect()操作
          Socket socket = new Socket("127.0.0.1",8080);
          //对socket进行处理
          process(socket);
      }
  }
  ```

  **注意**：Socket对象有关于套接字连接的信息，如输入/输出流信息等。

  + 手写一个JDBC连接数据库进行查询

  ```java
  import java.sql.Connection;
  import java.sql.DriverManager;
  import java.sql.ResultSet;
  import java.sql.Statement;
  public class ConnectDB {
      public static void main(String[] args){
          //1.加载驱动
          Class.forName("com.mysql.jdbc.Driver");
          //2.获取数据库连接
          String url = "jdbc:mysql://localhost:3306/test?user=root&password=root";
          Connection conn = DriverManager.getConnection(url);
          //3.获取操作SQL语句的Statement对象
          Statement statement = conn.createStatement();
          //4.执行查询
          String sql = "select * from test_table";
          ResultSet rs = statement.executeQuery();
          //5.从ResultSet中获得查询结果 
      }
  }
  ```

  + Java反射
  + 泛型
  + 对equals()和hashCode()理解
  + Java多态（重载和重写）
  + 序列化和反序列化
  + clone()的深拷贝和浅拷贝
  + **并发编程**（AQS、原子类、COW技术、synchronized、阻塞队列、线程池）
  + 异常类的继承结构，容器类的继承结构，流的继承结构（字符流和字节流区别）

+ Spring

  + Spring事务实现方式
  + Bean的生命周期

  +  IoC（控制反转）和AOP（面向切面编程）

+ 正则表达式

+ Linux

  + 文件管理
  + 查看内存和CPU使用情况
  + 查看网络连接状态
  + 一些简单操作命令
  + 文本操作命令（find, grep, awk, sed等）

+ Netty

+ 分布式系统相关知识

+ 项目管理知识（git, maven, IDE)

+ 负载均衡算法（轮询、加权轮询、随机、加权随机、源地址Hash、最小压力）

4. 笔试和面试

+ 笔试
  + 算法题
  + 基础知识：选择题、填空题
  + 场景题：给一个场景，让你设计一个应用

+ 面试

  + 基础知识
  + 一般会有1、2道算法题（难度一般），重点会考查编码习惯（代码可读性）、思维逻辑是否严谨（对边界是否有考虑）
  + 针对简历问一些跟项目相关的问题（看你的沟通能力，是否把项目描述清楚）

+ 一些面试题
  + 求一个数组的中位数(猿辅导)
  + 1000万的数据取前k大的数[TOPK问题]（美团)
  + 线程池参数含义（美团）
  + String s=new String("abc")会创建几个对象， 如果是（"a"+"bc"）呢 （美团）
  + 说一下SpringMVC从前台发起请求到输出页面的流程（美团）
  + 堆的数据结构是什么？堆的插入、删除是怎样的流程？（美团）
  + 海量数据日志，有些相同的日志占到1/3，找出这些日志（美团）
  + 链表的归并排序/快速排序（字节跳动）
  + 实现一个阻塞队列（字节跳动）
  + 线程和进程的区别（字节跳动）
  + 谈谈你对Hash的理解（字节跳动）
  + 写一个快速排序，推算一下这个算法的复杂度（字节跳动）
  + 尽可能详细的描述在浏览器输入www.baidu.com中间经过的流程（百度）
  + 判断一个链表是否有环（百度）
  + 讲一下Spring、SpringMVC和MyBatis（百度）
  + 写一个死锁程序（百度）
  + JVM加载一个类的过程，双亲委派模型了解吗？（阿里）
  + TCP如何保证可靠传输？滑动窗口算法讲一下？（阿里）
  + session和cookie的区别和联系？session的生命周期，分布式session管理问题（阿里）
  + IO密集和CPU密集两种情况下，线程池里的线程数应该怎么设置？（阿里）
  + ping命令基于什么协议？（滴滴）
  + 有10亿个qq号码存在一个文件中，给你一个qq号，怎么判断该qq号在不在那个文件里？（腾讯）

**参考资料**：

[https://github.com/jianghui-galaxy/Interview-Notebook](https://github.com/jianghui-galaxy/Interview-Notebook)

https://github.com/jwasham/coding-interview-university

《UNIX网络编程卷1：套接字联网API》

《UNIX环境高级编程》

《深入理解计算机系统》