---
layout: post
title:  "Recommender system"
date:  2019-12-05 14:45:00 +0800
img:  6/main.jpg
description: 研一上学期IBM课程大作业

---

# 一. 推荐系统简介

​       随着互联网行业的井喷式发展，获取信息的方式越来越多，人们从主动获取信息逐渐变成了被动接受信息，信息量也在以几何倍数式爆发增长。举一个例子，PC时代用google reader，常常有上千条未读博客更新；如今的微信公众号，也有大量的红点未阅读。垃圾信息越来越多，导致用户获取有价值信息的成本大大增加。为了解决这个问题，比较极端的做法是直接忽略所有推送消息的入口。但在很多时候，有效信息的获取速度极其重要。面对信息的爆炸式增长，提高信息获取的有效性；针对性的需求也就自然出现了，推荐系统应运而生。

​        最早的推荐系统应该是亚马逊为了提升长尾货物的用户抵达率而发明的。已经有数据证明，长尾商品的销售额以及利润总和与热门商品是基本持平的。亚马逊网站上在线销售的商品何止百万，但首页能够展示的商品数量又极其有限，给用户推荐他们可能喜欢的商品就成了一件非常重要的事情。当然，商品搜索也是一块大蛋糕，亚马逊的商品搜索早已经开始侵蚀谷歌的核心业务了。在亚马逊的商品展示页面图1，经常能够看见：浏览此商品的顾客也同时浏览。这就是非常典型的推荐系统。

![img](../assets/img/6/amazon.jpg)

<center>图1 亚马逊推荐页面</center>

​        随着推荐引擎的出现，用户获取信息的方式从简单的目标明确的数据的搜索转换到更高级更符合人们使用习惯的信息发现。如今，随着推荐技术的不断发展，推荐引擎已经在电子商务(E-commerce，例如 Amazon、当当网)和一些基于social 的社会化站点 ( 包括音乐，电影和图书分享，例如豆瓣，Mtime 等)都取得很大的成功。这也进一步的说明了，Web2.0环境下，在面对海量的数据，用户需要这种更加智能的，更加了解他们需求，口味和喜好的信息发现机制。

# 二．推荐引擎

## 2.1 推荐引擎介绍

​        推荐引擎利用特殊的信息过滤技术，将不同的物品或内容推荐给可能对它们感兴趣的用户。推荐引擎的工作原理如图2所示。

![img](../assets/img/6/system.png)

<center>图2 推荐引擎工作原理</center>

一般情况下，推荐引擎所需要的数据源包括：

+ 要推荐物品或内容的元数据，例如关键字、基因描述等。

+ 系统用户的基本信息，例如性别、年龄等。

+ 用户对物品或内容的偏好，根据应用本身的不同，可能包括对物品的评分，用户查看物品的记录，用户的买记录等。

​       其中用户对物品或内容的偏好，可以分为两类：一是显式的用户反馈，这类是用户在网站上自然浏览或者使用网站以外，显式的提供反馈信息，例如用户对物品的评分，或者对物品的评论；另一个是隐式的用户反馈，这类是用户在使用网站是产生的数据，隐式的反应了用户对物品的喜好，例如用户购买了某物品，用户查看了某物品的信息等。

​        推荐引擎根据不同的推荐机制可能用到数据源中的一部分，然后根据这些数据分析出一定的规则或者直接对用户对其他物品的喜好进行预测计算。这样推荐系统可以在用户进入的时候给他推荐他可能感兴趣的物品。

## 2.2 推荐引擎分类

推荐引擎的分类可以根据很多指标，常见的有以下三种：

1. 推荐引擎是不是为不同的用户推荐不同的数据

根据这个指标，推荐引擎可以分为基于大众行为的推荐引擎和个性化推荐引擎。

+ 大众行为的推荐引擎，对每个用户都给出同样的推荐，这些推荐可以是静态的由系统管理员人工设定的，或者基于系统所有用户的反馈统计计算出的当下比较流行的物品。

+ 个性化推荐引擎，对不同的用户，根据他们的口味和喜好给出更加精确的推荐，这时，系统需要了解需推荐内容和用户的特质，或者基于社会化网络，通过找到与当前用户相同喜好的用户（聚类），实现推荐。

​       这是一个最基本的推荐引擎分类，其实大部分人们讨论的推荐引擎都是个性化的推荐引擎，因为从根本上说，只有个性化的推荐引擎才是更加智能的信息发现过程。

2. 根据推荐引擎的数据源

​        其实这里讲的是如何发现数据的相关性，因为大部分推荐引擎的工作原理还是基于物品或者用户的相似集进行推荐。那么参考图1.1给出的推荐系统原理图，根据不同的数据源发现数据相关性的方法可以分为以下几种：

+ 根据系统用户的基本信息发现用户的相关程度，这种被称为基于人口统计学的推荐（Demographic-based Recommendation）。

+ 根据推荐物品或内容的元数据，发现物品或者内容的相关性，这种被称为基于内容的推荐（Content-based Recommendation）。

+ 根据用户对物品或者信息的偏好，发现物品或者内容本身的相关性，或者是发现用户的相关性，这种被称为基于协同过滤的推荐（Collaborative Filtering-based Recommendation）。

3.  根据推荐模型的建立方式

​        可以想象在海量物品和用户的系统中，推荐引擎的计算量是相当大的，要实现实时的推荐务必需要建立一个推荐模型，关于推荐模型的建立方式可以分为以下几种：

+ 基于物品和用户本身的，这种推荐引擎将每个用户和每个物品都当作独立的实体，预测每个用户对于每个物品的喜好程度，这些信息往往是用一个二维矩阵描述的。由于用户感兴趣的物品远远小于总物品的数目，这样的模型导致大量的数据空置，即我们得到的二维矩阵往往是一个很大的稀疏矩阵。同时为了减小计算量，我们可以对物品和用户进行聚类， 然后记录和计算一类用户对一类物品的喜好程度，但这样的模型又会在推荐的准确性上有损失。

+ 基于关联规则的推荐（Rule-based Recommendation）：关联规则的挖掘已经是数据挖掘中的一个经典的问题，主要是挖掘一些数据的依赖关系，典型的场景就是“购物篮问题”，通过关联规则的挖掘，我们可以找到哪些物品经常被同时购买，或者用户购买了一些物品后通常会购买哪些其他的物品，当我们挖掘出这些关联规则之后，我们可以基于这些规则给用户进行推荐。

+ 基于模型的推荐（Model-based Recommendation）：这是一个典型的机器学习的问题，可以将已有的用户喜好信息作为训练样本，训练出一个预测用户喜好的模型，这样以后用户在进入系统，可以基于此模型计算推荐。这种方法的问题在于如何将用户实时或者近期的喜好信息反馈给训练好的模型，从而提高推荐的准确度。

​        其实在现在的推荐系统中，很少有只使用了一个推荐策略的推荐引擎，一般都是在不同的场景下使用不同的推荐策略从而达到最好的推荐效果，例如Amazon的推荐，它将基于用户本身历史购买数据的推荐，和基于用户当前浏览的物品的推荐，以及基于大众喜好的当下比较流行的物品都在不同的区域推荐给用户，让用户可以从全方位的推荐中找到自己真正感兴趣的物品。

## 2.3 一些常见的推荐机制

1. 基于人口统计学的推荐

+ 基于人口统计学的推荐机制（Demographic-based Recommendation）是一种最易于实现的推荐方法，它只是简单的根据系统用户的基本信息发现用户的相关程度，然后将相似用户喜爱的其他物品推荐给当前用户，图3给出了这种推荐的工作原理。

![img](../assets/img/6/Demographic-based .png)

<center>图3 基于人口统计学的推荐</center>

​       从图中可以很清楚的看到，首先，系统对每个用户都有一个用户Profile的建模，其中包括用户的基本信息，例如用户的年龄，性别等等。然后，系统会根据用户的Profile计算用户的相似度，可以看到用户A的Profile和用户C一样，那么系统会认为用户A和C是相似用户，在推荐引擎中，可以称他们是“邻居”。最后，基于“邻居”用户群的喜好推荐给当前用户一些物品，图中将用户A喜欢的物品A推荐给用户C。这种基于人口统计学的推荐机制的好处在于：

+ 因为不使用当前用户对物品的喜好历史数据，所以对于新用户来讲没有“冷启动（Cold Start）”的问题。

+ 这个方法不依赖于物品本身的数据，所以这个方法在不同物品的领域都可以使用，它是领域独立的（domain-independent）。

​        这种基于用户的基本信息对用户进行分类的方法过于粗糙，尤其是对品味要求较高的领域，比如图书，电影和音乐等领域，无法得到很好的推荐效果。可能在一些电子商务的网站中，这个方法可以给出一些简单的推荐。另外一个局限是，这个方法可能涉及到一些与信息发现问题本身无关却比较敏感的信息，比如用户的年龄等，这些用户信息不是很好获取。

2. 基于内容的推荐

基于内容的推荐是在推荐引擎出现之初应用最为广泛的推荐机制，它的核心思想是根据推荐物品或内容的元数据，发现物品或者内容的相关性，然后基于用户以往的喜好记录，推荐给用户相似的物品。图4给出了基于内容推荐的基本原理。

![img](../assets/img/6/content-based.png)

<center>图4 基于内容的推荐</center>

​        图4给出了基于内容推荐的一个典型的例子—电影推荐系统，首先我们需要对电影的元数据有一个建模，这里只简单的描述了一下电影的类型；然后通过电影的元数据发现电影间的相似度，因为类型都是“爱情，浪漫”电影A和C被认为是相似的电影（当然，只根据类型是不够的，要得到更好的推荐，我们还可以考虑电影的导演，演员等等）；最后实现推荐，对于用户 A，他喜欢看电影 A，那么系统就可以给他推荐类似的电影 C。这种基于内容的推荐机制的好处在于它能很好的建模用户的口味，能提供更加精确的推荐。但它也存在以下几个问题：

+ 需要对物品进行分析和建模，推荐的质量依赖于对物品模型的完整和全面程度。在现在的应用中我们可以观察到关键词和标签（Tag）被认为是描述物品元数据的一种简单有效的方法。

+ 物品相似度的分析仅仅依赖于物品本身的特征，这里没有考虑人对物品的态度。

+ 因为需要基于用户以往的喜好历史做出推荐，所以对于新用户有“冷启动”的问题。

​       虽然这个方法有很多不足和问题，但他还是成功的应用在一些电影，音乐，图书的社交站点，有些站点还请专业的人员对物品进行基因编码，比如潘多拉，在一份报告中说道，在潘多拉的推荐引擎中，每首歌有超过100个元数据特征，包括歌曲的风格，年份，演唱者等等。

3. 基于协同过滤的推荐

​        随着Web2.0的发展，Web站点更加提倡用户参与和用户贡献，因此基于协同过滤的推荐机制因运而生。它的原理很简单，就是根据用户对物品或者信息的偏好，发现物品或者内容本身的相关性，或者是发现用户的相关性，然后再基于这些关联性进行推荐。基于协同过滤的推荐可以分为三个子类：基于用户的推荐（User-based Recommendation）,基于项目的推荐（Item-based Recommendation）和基于模型的推荐（Model-based Recommendation）。下面我们一个一个详细的介绍着三种协同过滤的推荐机制。

+ 基于用户的协同过滤推荐

​       基于用户的协同过滤推荐的基本原理是，根据所有用户对物品或者信息的偏好，发现与当前用户口味和偏好相似的“邻居”用户群，在一般的应用中是采用计算“K-邻居”的算法；然后，基于这K个邻居的历史偏好信息，为当前用户进行推荐。

![img](../assets/img/6/user.png)

<center>图5 基于用户的协同过滤推荐</center>

​        图5示意出基于用户的协同过滤推荐机制的基本原理，假设用户A喜欢物品 A，物品C，用户B喜欢物品B，用户C喜欢物品A ，物品C和物品D；从这些用户的历史喜好信息中，我们可以发现用户A和用户C的口味和偏好是比较类似的，同时用户C还喜欢物品D，那么我们可以推断用户A可能也喜欢物品D，因此可以将物品D推荐给用户A。

​        基于用户的协同过滤推荐机制和基于人口统计学的推荐机制都是计算用户的相似度，并基于“邻居”用户群计算推荐，但它们所不同的是如何计算用户的相似度，基于人口统计学的机制只考虑用户本身的特征，而基于用户的协同过滤机制可是在用户的历史偏好的数据上计算用户的相似度，它的基本假设是，喜欢类似物品的用户可能有相同或者相似的口味和偏好。

+  基于项目的协同过滤推荐

基于项目的协同过滤推荐的基本原理也是类似的，只是说它使用所有用户对物品或者信息的偏好，发现物品和物品之间的相似度；然后根据用户的历史偏好信息，将类似的物品推荐给用户，图6很好的诠释了它的基本原理。假设用户A喜欢物品A和物品C，用户B喜欢物品A，物品B和物品C，用户C喜欢物品A，从这些用户的历史喜好可以分析出物品A和物品C时比较类似的，喜欢物品A的人都喜欢物品C，基于这个数据可以推断用户C很有可能也喜欢物品C，所以系统会将物品C推荐给用户C。

![img](../assets/img/6/item.png)

<center>图6 基于项目的协同过滤推荐</center>

​       与上面讲的类似，基于项目的协同过滤推荐和基于内容的推荐其实都是基于物品相似度预测推荐，只是相似度计算的方法不一样，前者是从用户历史的偏好推断，而后者是基于物品本身的属性特征信息

+ 基于模型的协同过滤推荐

​        基于模型的协同过滤就是基于样本的用户喜好信息，训练一个推荐模型，然后根据实时的用户喜好的信息进行预测，计算推荐。

​        最后，基于协同过滤的推荐机制是现今应用最为广泛的推荐机制，它有以下几个显著的优点：

+ 它不需要对物品或者用户进行严格的建模，而且不要求物品的描述是机器可理解的，所以这种方法也是领域无关的

+ 这种方法计算出来的推荐是开放的，可以共用他人的经验，很好的支持用户发现潜在的兴趣偏好

同时它也存在以下几个问题：

+ 方法的核心是基于历史数据，所以对新物品和新用户都有“冷启动”的问题

+ 推荐的效果依赖于用户历史偏好数据的多少和准确性

+ 在大部分的实现中，用户历史偏好是用稀疏矩阵进行存储的，而稀疏矩阵上的计算有些明显的问题，包括可能少部分人的错误偏好会对推荐的准确度有很大的影响等等

+ 对于一些特殊品味的用户不能给予很好的推荐。

+ 由于以历史数据为基础，抓取和建模用户的偏好后，很难修改或者根据用户的使用演变，从而导致这个方法不够灵活。

4. 混合的推荐机制

​        现行的Web站点上的推荐往往都不是单纯地只采用某一种推荐的机制和策略，他们往往是将多个方法混合在一起，从而达到更好的推荐效果。关于如何组合各个推荐机制，这里讲几种比较流行的组合方法。

+ 加权的混合（Weighted Hybridization）：用线性公式（linear formula）将几种不同的推荐按照一定权重组合起来，具体权重的值需要在测试数据集上反复实验，从而达到最好的推荐效果。

+ 切换的混合（Switching Hybridization）：前面也讲到，其实对于不同的情况（数据量，系统运行状况，用户和物品的数目等），推荐策略可能有很大的不同，那么切换的混合方式，就是允许在不同的情况下，选择最为合适的推荐机制计算推荐。

+ 分区的混合（Mixed Hybridization）：采用多种推荐机制，并将不同的推荐结果分不同的区显示给用户。其实，Amazon、当当网等很多电子商务网站都是采用这样的方式，用户可以得到很全面的推荐，也更容易找到他们想要的东西。

+ 分层的混合（Meta-Level Hybridization）：采用多种推荐机制，并将一个推荐机制的结果作为另一个的输入，从而综合各个推荐机制的优缺点，得到更加准确的推荐。

# 三．相似度的计算

​        上面介绍了各种推荐引擎的内部工作原理，从中我们可以看到要发现两个物或者是人之间的关系，离不开计算物物或人人之间的相似度。计算相似度的方法有很多，下面对一些常用的计算方式进行说明。

1. 欧几里得距离

​        欧氏距离是最常用的距离计算公式，衡量的是多维空间中各个点之间的绝对距离，当数据很稠密并且连续时，这是一种很好的计算方式，具体计算公式如下：

![Euclidean Distance](../assets/img/6/euclidean-distance.png)

但这种方法，因为是基于各维度特征的绝对数值，所以欧氏距离需要保证各维度指标在相同的刻度级别，否则会导致一些数值大的特征对最终结果产生过于大的影响。

2. 余弦相似度

​        余弦相似度用向量空间中两个向量夹角的余弦值作为衡量两个个体间差异的大小，具体计算公式如下：

![Cosine Similarity](../assets/img/6/cosine-similarity.png))

相比距离度量，余弦相似度更加注重两个向量在方向上的差异，而非距离或长度上。

3. Jaccard相似度

Jaccard系数主要用于计算符号度量或布尔值度量的个体间的相似度，具体计算公式如下：

![Jaccard Coefficient](../assets/img/6/jaccard-coefficient.png)

​       因为个体的特征属性都是由符号度量或者布尔值标识，因此无法衡量差异具 体值的大小，只能获得“是否相同”这个结果，所以Jaccard系数只关心个体间共同具有的特征是否一致这个问题。

4. 皮尔逊相关系数

​       通过Peason相关系数来度量两个用户的相似性，具体计算公式如下：

![Pearson Correlation Coefficient](../assets/img/6/pearson.png)

​        计算时，首先找到两个用户共同评分过的项目集，然后计算这两个向量的相关系数。

​        当然上面的相似度计算在实际应用还需要很多的修正，比如使用归一化去除特征之间的差异，或者对特征进行加权以强调某些特征，还有一些去除个体评分差别的方法等。

# 四．推荐引擎的应用

介绍完推荐引擎的基本原理，基本推荐机制，下面简要分析几个有代表性的推荐引擎的应用，这里选择两个领域：Amazon作为电子商务的代表，豆瓣作为社交网络的代表。

1. 推荐在电子商务中的应用——Amazon

Amazon作为推荐引擎的鼻祖，它已经将推荐的思想渗透在应用的各个角落。Amazon推荐的核心是通过数据挖掘算法和比较用户的消费偏好于其他用户进行对比，借以预测用户可能感兴趣的商品。对应于上面介绍的各种推荐机制，Amazon 采用的是分区的混合的机制，并将不同的推荐结果分不同的区显示给用户，图7展示了用户在Amazon上能得到的推荐。 

![img](../assets/img/6/amazon.jpg)

<center>图7 Amazon推荐图</center>

​        Amazon很多推荐是基于用户的profile计算出来的，用户的profile中记录了用户在Amazon上的行为，包括看了那些物品，买了那些物品，收藏夹和wish list里的物品等等，当然Amazon里还集成了评分等其他的用户反馈的方式，它们都是profile的一部分，同时，Amazon 提供了让用户自主管理自己 profile的功能，通过这种方式用户可以更明确的告诉推荐引擎他的品味和意图是什么。

2. 推荐在社交网站中的应用——豆瓣

​         豆瓣是国内做的比较成功的社交网站，它以图书，电影，音乐和同城活动为中心，形成一个多元化的社交网络平台，自然推荐的功能是必不可少的。

![img](../assets/img/6/douban.png)

<center>图8 豆瓣电影标签</center>

​        当你在豆瓣电影中将一些你看过的或是感兴趣的电影加入你看过和想看的列表里，并给贴上标签，这样豆瓣的推荐引擎就可以拿到你的一些偏好信息，并推荐如图9所示的电影。

<img src="../assets/img/6/douban2.png"></img>

<center>图9 豆瓣电影推荐</center>

# 五．总结

​        通过本次对推荐系统的系统介绍，可以看出一个主要影响推荐效果的是模型选择；另外就是相似度计算的定义，也就是说一个好的推荐系统要有好的处理数据的结构和评价用户或物品之间的相似度。个人认为要得到一个好的推荐效果首先要有大量真实有效的数据，然后需要根据不同的应用场景选择合适的模型。

​        我们设计推荐系统是为了提高用户体验，但我认为推荐系统的准确率越高并不能代表用户的体验度也越高。因为这有可能会侵犯到某些用户的隐私，所以未来隐私保护技术在推荐系统上的应用也是必不可少的。

